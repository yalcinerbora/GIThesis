#version 430

#define I_DEPTH_READ layout(r32f, binding = 0) restrict readonly
#define I_DEPTH_WRITE layout(r32f, binding = 1) restrict writeonly

#define U_DEPTH_SIZE layout(location = 0)
#define U_PIX_COUNT layout(location = 1)

uniform I_DEPTH_READ image2DArray depthRead;
uniform I_DEPTH_WRITE image2DArray depthWrite;

U_DEPTH_SIZE uniform uint depthSize;
U_PIX_COUNT uniform uint totalPix;

#define BLOCK_SIZE 256

layout (local_size_x = BLOCK_SIZE, local_size_y = 1, local_size_z = 1) in;
void main(void)
{
	uint globalId = gl_GlobalInvocationID.x;
	if(globalId > totalPix) return;

	// Generate Pixel Id and Array Id
	uint arrayId = globalId / (depthSize * depthSize);
	uint pixId = globalId % (depthSize * depthSize);
	uvec2 uv = uvec2(pixId % depthSize, pixId / depthSize);

	float depthA = imageLoad(depthRead, ivec3(uv.xy * 2 + ivec2(0, 0), arrayId)).x;
	float depthB = imageLoad(depthRead, ivec3(uv.xy * 2 + ivec2(0, 1), arrayId)).x;
	float depthC = imageLoad(depthRead, ivec3(uv.xy * 2 + ivec2(1, 0), arrayId)).x;
	float depthD = imageLoad(depthRead, ivec3(uv.xy * 2 + ivec2(1, 1), arrayId)).x;

	//float maxDepth = max(max(depthA, depthB), max(depthC, depthD));
	float maxDepth = min(min(depthA, depthB), min(depthC, depthD));
	imageStore(depthWrite, ivec3(uv.xy, arrayId), vec4(maxDepth));
}