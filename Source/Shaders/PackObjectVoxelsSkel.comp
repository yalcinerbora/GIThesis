#version 430
				
// Definitions
#define LU_VOXEL_POS layout(std430, binding = 0) restrict writeonly
#define LU_VOXEL_NORM layout(std430, binding = 1) restrict writeonly
#define LU_VOXEL_ALBEDO layout(std430, binding = 2) restrict writeonly
#define LU_VOXEL_WEIGHT layout(std430, binding = 4) restrict writeonly

#define LU_INDEX_ATOMIC layout(std430, binding = 5) restrict writeonly

#define LU_NORMAL_DENSE layout(std430, binding = 6) restrict
#define LU_ALBEDO_DENSE layout(std430, binding = 7) restrict
#define LU_WEIGHT_DENSE layout(std430, binding = 8) restrict

#define U_OBJ_ID layout(location = 4)
#define U_MAX_CACHE_SIZE layout(location = 5)
#define U_OBJ_TYPE layout(location = 6)
#define U_SPLIT_CURRENT layout(location = 7)
#define U_TEX_SIZE layout(location = 8)

// I-O
U_OBJ_TYPE uniform uint objType;
U_OBJ_ID uniform uint objId;
U_MAX_CACHE_SIZE uniform uint maxSize;
U_SPLIT_CURRENT uniform uvec3 currentSplit;
U_TEX_SIZE uniform uvec4 texSize3D;

LU_INDEX_ATOMIC buffer CountArray
{
	uint writeIndex;
};

LU_VOXEL_POS buffer VoxelPosArray
{
	uint voxelPos[];
};

LU_VOXEL_NORM buffer VoxelNormArray
{
	uint voxelNorm[];
};

LU_VOXEL_ALBEDO buffer VoxelAlbedoArray
{
	uint voxelAlbedo[];
};

LU_VOXEL_WEIGHT buffer VoxelWeightArray
{
	uvec2 voxelWeight[];
};

LU_ALBEDO_DENSE buffer DenseAlbedoes 
{
	vec4 albedoDense[];
};

LU_NORMAL_DENSE buffer NormalBuffer 
{
	vec4 normalDense[];
};

LU_WEIGHT_DENSE buffer WeightBuffer 
{
	uvec2 weightDense[];
};

uint PackVoxelPos(in uvec3 voxCoord)
{
	// Voxel Ids 10 Bit Each (last 2 bit will be used for cascade no)
	uint result = 0;
	result |= voxCoord.z << 20;
	result |= voxCoord.y << 10;
	result |= voxCoord.x;
	return result;
}

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
void main(void)
{
	uvec3 voxId = gl_GlobalInvocationID.xyz;
	if(voxId.x < texSize3D.x &&
	   voxId.y < texSize3D.y &&
	   voxId.z < texSize3D.z)
	{
		ivec3 iCoord = ivec3(voxId);
		uint coord = iCoord.z * texSize3D.w * texSize3D.w +
					 iCoord.y * texSize3D.w +
					 iCoord.x;
		
		vec4 normal = normalDense[coord];
		vec4 albedo = albedoDense[coord];
		uvec2 weight = weightDense[coord];

		// Empty Normal Means its vox is empty
		if(normal.w > 0.0f)
		{
			// Average Divide
			albedo.xyzw /= normal.w;
			normal.xyz /= normal.w;
			normal.w = 0.0f;

			uint index = atomicAdd(writeIndex, 1);
			if(index <= maxSize)
			{
				voxId += currentSplit * texSize3D.w;

				voxelPos[index] = PackVoxelPos(voxId);
				voxelNorm[index] = packSnorm4x8(normal);
				voxelAlbedo[index] = packUnorm4x8(albedo);
				voxelWeight[index] = weight;
			}
			// Clear Texture
			//normalDense[coord] = vec4(0.0f);
			//albedoDense[coord] = vec4(0.0f);
			//weightDense[coord] = uvec2(0);
		}
	}
}