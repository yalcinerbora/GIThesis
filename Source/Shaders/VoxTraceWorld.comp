#version 430
/*	
	**Voxel Raytrace Compute Shader**
	
	File Name	: VoxTraceWorld.vert
	Author		: Bora Yalciner
	Description	:

		Cuda does not support depth texture copy
		we need to copy depth values of the gbuffer to depth
*/

// Definitions
#define I_OUT_TEXTURE layout(rgba16f, binding = 0) restrict

#define LU_SVO_NODE layout(std430, binding = 2) readonly
#define LU_SVO_ILLUM layout(std430, binding = 3) readonly
#define LU_SVO_LEVEL_OFFSET layout(std430, binding = 4) readonly

#define U_RENDER_TYPE layout(location = 0)
#define U_FETCH_LEVEL layout(location = 1)

#define U_FTRANSFORM layout(std140, binding = 0)
#define U_INVFTRANSFORM layout(std140, binding = 1)
#define U_OCTREE_UNIFORMS layout(std140, binding = 3)

#define FLT_MAX 3.402823466e+38F
#define EPSILON 0.00001f
//#define SQRT_3 1.73205f

#define IRRADIANCE 0
#define SPECULAR_ALBEDO 1
#define NORMAL 2
#define OCCLUSION 3
#define LIGHT_DIR 4

// Uniforms
U_RENDER_TYPE uniform uint renderType;
U_FETCH_LEVEL uniform uint fetchLevel;

LU_SVO_NODE buffer SVONode
{ 
	uint svoNode[];
};

LU_SVO_ILLUM buffer SVOIllumination
{ 
	uvec4 svoIllum[];
};

LU_SVO_LEVEL_OFFSET buffer SVOLevelOffsets
{
	uint svoLevelOffsets[];
};

U_FTRANSFORM uniform FrameTransform
{
	mat4 view;
	mat4 projection;
};

U_INVFTRANSFORM uniform InverseFrameTransform
{
	mat4 invViewProjection;

	vec4 camPos;		// To Calculate Eye
	vec4 camDir;		// To Calculate Eye
	ivec4 viewport;		// Viewport Params
	vec4 depthNearFar;	// depth range params (last two unused)
};

U_OCTREE_UNIFORMS uniform OctreeUniforms
{
	vec3 worldPos;
	float baseSpan;

	uint minSVOLevel;
	uint denseLevel;
	uint minCascadeLevel;
	uint maxSVOLevel;
	
	uint cascadeCount;
	uint nodeOffsetDifference;
	uint gridSize;
	uint pad1;
};

// Textures
uniform I_OUT_TEXTURE image2D fbo;

// Functions
uint DenseIndexToLinear(in ivec3 denseIndex, in uint level)
{
	// TODO: Change to Morton (Z-order curve)
	uint size = 1 << level;
	return  denseIndex.z * size * size +
			denseIndex.y * size +
			denseIndex.x;
}

ivec3 LevelVoxId(out vec3 offset, in vec3 worldPoint, in uint depth)
{
	float levelSpan = baseSpan * (0x1 << (maxSVOLevel - depth));
	vec3 voxId = (worldPoint - worldPos.xyz) / levelSpan;
	vec3 voxIdBase = floor(voxId);
	offset = voxId - voxIdBase;
	return ivec3(voxIdBase);
}

vec3 LevelVoxIdF(in vec3 worldPoint, in uint depth)
{
	float levelSpan = baseSpan * (0x1 << (maxSVOLevel - depth));
	return (worldPoint - worldPos.xyz) / levelSpan;
}

vec3 PixelToWorld()
{
	vec2 screenUV = (vec2(gl_GlobalInvocationID.xy) + vec2(0.5f) - vec2(viewport.xy)) / vec2(viewport.zw);

	// NDC (Z is near plane)
	vec3 ndc = vec3(screenUV, 0.0f);
	ndc.xy = 2.0f * ndc.xy - 1.0f;
	ndc.z = ((2.0f * (ndc.z - depthNearFar.x) / (depthNearFar.y - depthNearFar.x)) - 1.0f);

	// Clip Space
	vec4 clip;
	clip.w = projection[3][2] / (ndc.z - (projection[2][2] / projection[2][3]));
	clip.xyz = ndc * clip.w;

	// From Clip Space to World Space
	return (invViewProjection * clip).xyz;
}

uint CalculateLevelChildId(in ivec3 voxPos, in uint level)
{
	uint bitSet = 0;
	bitSet |= ((voxPos.z >> (maxSVOLevel - level)) & 0x000000001) << 2;
	bitSet |= ((voxPos.y >> (maxSVOLevel - level)) & 0x000000001) << 1;
	bitSet |= ((voxPos.x >> (maxSVOLevel - level)) & 0x000000001) << 0;
	return bitSet;
}

vec4 UnpackIrradianceSVO(in uint irradiancePacked)
{
	return unpackUnorm4x8(irradiancePacked);
}

vec4 UnpackOccupancySVO(in uint occupancyPacked)
{
	return unpackUnorm4x8(occupancyPacked);
}

vec3 UnpackNormalSVO(in uint normalPacked)
{
	return unpackSnorm4x8(normalPacked).xyz;
}

vec3 UnpackLightDirSVO(in uint lightDirPacked)
{
	return unpackSnorm4x8(lightDirPacked).xyz;
}

float AnisotropicOcclusion(in vec4 occlusion,
						   in vec3 direction)
{
	// TODO:
	return occlusion.x;
}

float IntersectDistance(in vec3 position, 
						in vec3 marchDir,
						in uint traverseLevel)
{
	// Voxel Corners are now (0,0,0) and (span, span, span)
	// span is current level grid span (leaf span * (2^ totalLevel - currentLevel)
	vec3 offset;
	float gridSpan = baseSpan * float(0x1 << (maxSVOLevel - traverseLevel));
	vec3 worldOffset = vec3(LevelVoxId(offset, position, traverseLevel)) * gridSpan;
		
	// Convert march position to voxel space
	vec3 voxWorld = worldPos + worldOffset;
	vec3 relativePos = position - voxWorld;
	// 6 Plane intersection on cube normalized coordinates
	// Since planes axis aligned writing code is optimized 
	// (instead of dot products)

	// P is normCoord (ray position)
	// D is dir (ray direction)
	// N is plane normal (since axis aligned (1, 0, 0), (0, 1, 0), (0, 0, 1)
	// d is gridDim (plane distance from origin) (for "far" planes)

	// d - (P dot N) (P dot N returns Px Py Pz for each plane)
	vec3 tClose = vec3(0.0f) - relativePos;	
	vec3 tFar = vec3(gridSpan) - relativePos;
	
	// Negate zeroes from direction
	// (D dot N) returns Dx Dy Dz for each plane
	// IF perpendicaular make it intersect super far
	bvec3 dirMask = greaterThan(abs(marchDir), vec3(EPSILON));
	marchDir.x = (dirMask.x) ? marchDir.x : EPSILON;
	marchDir.y = (dirMask.y) ? marchDir.y : EPSILON;
	marchDir.z = (dirMask.z) ? marchDir.z : EPSILON;

	// acutal T value
	// d - (P dot N) / (N dot D)
	vec3 dirInv = vec3(1.0f) / marchDir;
	tClose *= dirInv;
	tFar *= dirInv;

	// Negate Negative
	// Write FLT_MAX if its <= EPSILON
	bvec3 tCloseMask = greaterThan(tClose, vec3(EPSILON));
	bvec3 tFarMask = greaterThan(tFar, vec3(EPSILON));
	tClose.x = (tCloseMask.x) ? tClose.x : FLT_MAX;
	tClose.y = (tCloseMask.y) ? tClose.y : FLT_MAX;
	tClose.z = (tCloseMask.z) ? tClose.z : FLT_MAX;
	tFar.x = (tFarMask.x) ? tFar.x : FLT_MAX;
	tFar.y = (tFarMask.y) ? tFar.y : FLT_MAX;
	tFar.z = (tFarMask.z) ? tFar.z : FLT_MAX;

	// Reduction
	float minClose = min(min(tClose.x, tClose.y), tClose.z);
	float minFar = min(min(tFar.x, tFar.y), tFar.z);
	return min(minClose, minFar) + 0.01f;
}

vec3 FetchFromIllum(out float occlusion, in uvec4 illum, in vec3 marchDir)
{
	// Occlusion
	vec4 occupancy = UnpackOccupancySVO(illum.z);
	occlusion = AnisotropicOcclusion(occupancy, marchDir);

	if(renderType == IRRADIANCE) return UnpackIrradianceSVO(illum.x).xyz;
	else if(renderType == SPECULAR_ALBEDO) return UnpackIrradianceSVO(illum.x).www;
	else if(renderType == NORMAL) return UnpackNormalSVO(illum.y);
	else if(renderType == OCCLUSION)
	{
		return vec3(1.0f - occlusion);
	}
	else if(renderType == LIGHT_DIR) return UnpackLightDirSVO(illum.w);
	return vec3(0.0f);
}

bool FindMarchLength(inout vec3 outData,
					 inout float occlusion,
					 inout vec3 position,
					 in vec3 marchDir)
{
	vec3 interp;
	ivec3 voxPos = LevelVoxId(interp, position, maxSVOLevel);
	ivec3 maxLevelSize = ivec3(0x1 << maxSVOLevel);
	
	// Cull if out of bounds
	if(	voxPos.x < 0 || voxPos.x >= maxLevelSize.x ||
		voxPos.y < 0 || voxPos.y >= maxLevelSize.y ||
		voxPos.z < 0 || voxPos.z >= maxLevelSize.z)
	{
		// Node is out of bounds
		// Alpha out the background color
		outData += vec3(1.0f) * (1.0f - occlusion);
		return false;
	}

	// Check Dense
	if(fetchLevel >= minSVOLevel && 
	   fetchLevel <= denseLevel)
	{
		// Dense Fetch
		vec3 interp;
		uint offset = svoLevelOffsets[fetchLevel];
		ivec3 index = LevelVoxId(interp, worldPos, fetchLevel);
		uvec4 illum = svoIllum[offset + DenseIndexToLinear(index, fetchLevel)];

		// Blend using occlusion values
		float dataOcclusion;
		vec3 data = FetchFromIllum(dataOcclusion, illum, marchDir);
		outData += data * dataOcclusion * (1.0f - occlusion);
		occlusion += dataOcclusion * (1.0f - occlusion);
		if((1.0f - occlusion) <= 0.0f) 
		{
			return false;
		}
		else
		{
			position += marchDir * IntersectDistance(position, marchDir, fetchLevel);
			return true;
		}
	}
	else
	{
		// Start tracing (stateless start from root (dense))
		// Initialize Traverse
		uint nodeIndex = 0;
	
		// Dense Node Index Fetch
		vec3 interp;
		uint offset = svoLevelOffsets[fetchLevel] - nodeOffsetDifference;
		ivec3 index = LevelVoxId(interp, worldPos, denseLevel);
		nodeIndex = svoNode[offset + DenseIndexToLinear(index, denseLevel)];
		if(nodeIndex == 0xFFFFFFFF) 
		{
			position += marchDir * IntersectDistance(position, marchDir, denseLevel);
			return true;
		}
		nodeIndex += CalculateLevelChildId(voxPos, denseLevel + 1);

		uint traversedLevel = denseLevel;
		while(traversedLevel < fetchLevel)
		{			
			uint offset = svoLevelOffsets[traversedLevel] - nodeOffsetDifference;
			uint nextNode = svoNode[offset + nodeIndex].x;
			if(nextNode == 0xFFFFFFFF) break;
			
			traversedLevel++;			
			nodeIndex = nextNode + CalculateLevelChildId(voxPos, traversedLevel);			
		}

		//
		if(traversedLevel >= minCascadeLevel || 
		   traversedLevel == fetchLevel)
		{
			uint offset = svoLevelOffsets[traversedLevel];
			uvec4 illum = svoIllum[offset + nodeIndex];

			// Blend using occlusion values
			float dataOcclusion;
			vec3 data = FetchFromIllum(dataOcclusion, illum, marchDir);
			outData += data * dataOcclusion * (1.0f - occlusion);
			occlusion += dataOcclusion * (1.0f - occlusion);
			if((1.0f - occlusion) <= 0.0f) 
			{
				return false;
			}
			else
			{
				position += marchDir * IntersectDistance(position, marchDir, fetchLevel);
				return true;
			}
		}
	}
	// Code Should not Return from here ever
	return false;
}

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main(void)
{
	uvec2 globalId = gl_GlobalInvocationID.xy;
	if(any(greaterThanEqual(globalId, viewport.zw))) return;

	// Generate Ray
	vec3 rayDir = normalize(PixelToWorld() - camPos.xyz);
	vec3 rayPos = camPos.xyz;

	// Do Ray Marching until
	// Either ray is fully occluded
	// Or ray is out of bounds
	vec3 marchPos = rayPos;
	vec3 outData = vec3(0.0f); float occlusion = 0.0f;	
	while(FindMarchLength(outData, occlusion, marchPos, rayDir));
	
	// If directional type fit it into color space
	if(renderType == NORMAL ||
	   renderType == LIGHT_DIR) 
		outData = (1.0f + outData) * 0.5f;
	
	imageStore(fbo, ivec2(globalId), vec4(outData, 1.0f)); 
}