#version 430
/*	
	**Voxel Deferred Sampled Compute Shader**
	
	File Name	: VoxTraceDeferred.vert
	Author		: Bora Yalciner
	Description	:

		Instead of tracing camera rays it directly samples deferred depth buffer to
		Sample positions of intersection points
*/

// Definitions
#define I_OUT_TEXTURE layout(rgba16f, binding = 0) restrict

#define LU_SVO_NODE layout(std430, binding = 2) readonly
#define LU_SVO_ILLUM layout(std430, binding = 3) readonly
#define LU_SVO_LEVEL_OFFSET layout(std430, binding = 4) readonly

#define U_RENDER_TYPE layout(location = 0)
#define U_FETCH_LEVEL layout(location = 1)

#define U_FTRANSFORM layout(std140, binding = 0)
#define U_INVFTRANSFORM layout(std140, binding = 1)
#define U_OCTREE_UNIFORMS layout(std140, binding = 3)

#define T_DEPTH layout(binding = 2)

#define IRRADIANCE 0
#define SPECULAR_ALBEDO 1
#define NORMAL 2
#define OCCLUSION 3
#define LIGHT_DIR 4

// Uniforms
U_RENDER_TYPE uniform uint renderType;
U_FETCH_LEVEL uniform uint fetchLevel;

// Buffers
LU_SVO_NODE buffer SVONode
{ 
	uvec4 svoNode[];
};

LU_SVO_ILLUM buffer SVOIllumination
{ 
	uvec4 svoIllum[];
};

LU_SVO_LEVEL_OFFSET buffer SVOLevelOffsets
{
	uint svoLevelOffsets[];
};

U_FTRANSFORM uniform FrameTransform
{
	mat4 view;
	mat4 projection;
};

U_INVFTRANSFORM uniform InverseFrameTransform
{
	mat4 invViewProjection;

	vec4 camPos;		// To Calculate Eye
	vec4 camDir;		// To Calculate Eye
	ivec4 viewport;		// Viewport Params
	vec4 depthNearFar;	// depth range params (last two unused)
};

U_OCTREE_UNIFORMS uniform OctreeUniforms
{
	vec3 gridPos;
	float baseSpan;

	uint minSVOLevel;
	uint denseLevel;
	uint minCascadeLevel;
	uint maxSVOLevel;
	
	uint cascadeCount;
	uint nodeOffsetDifference;
	uint gridSize;
	uint pad0;
};

// Textures
uniform I_OUT_TEXTURE image2D fbo;

uniform T_DEPTH sampler2D gBuffDepth;

// Functions
vec3 DepthToWorld(vec2 gBuffUV)
{
	// Converts Depthbuffer Value to World Coords
	// First Depthbuffer to Screen Space
	vec3 ndc = vec3(gBuffUV, texture(gBuffDepth, gBuffUV).x);
	if(ndc.z == 1.0f) return vec3(1.0e+10);

	ndc.xy = 2.0f * ndc.xy - 1.0f;
	ndc.z = ((2.0f * (ndc.z - depthNearFar.x) / (depthNearFar.y - depthNearFar.x)) - 1.0f);

	// Clip Space
	vec4 clip;
	clip.w = projection[3][2] / (ndc.z - (projection[2][2] / projection[2][3]));
	clip.xyz = ndc * clip.w;

	// From Clip Space to World Space
	return (invViewProjection * clip).xyz;
}

uint DenseIndexToLinear(in ivec3 denseIndex, in uint level)
{
	// TODO: Change to Morton (Z-order curve)
	uint size = (0x1 << level);
	return  denseIndex.z * size * size +
			denseIndex.y * size +
			denseIndex.x;
}

ivec3 LevelVoxId(out vec3 offset, in vec3 worldPoint, in uint depth)
{
	float levelSpan = baseSpan * (0x1 << (maxSVOLevel - depth));
	float invLevelSpan = 1.0f / levelSpan;

	vec3 relativeLoc = worldPoint - gridPos;
	offset = mod(relativeLoc, levelSpan) * invLevelSpan;
	return ivec3(floor(relativeLoc * invLevelSpan));
}

uint CalculateLevelChildId(in ivec3 voxPos, in uint level)
{
	uint bitSet = 0;
	bitSet |= ((voxPos.z >> (maxSVOLevel - level)) & 0x000000001) << 2;
	bitSet |= ((voxPos.y >> (maxSVOLevel - level)) & 0x000000001) << 1;
	bitSet |= ((voxPos.x >> (maxSVOLevel - level)) & 0x000000001) << 0;
	return bitSet;
}

vec4 UnpackIrradianceSVO(in uint irradiancePacked)
{
	return unpackUnorm4x8(irradiancePacked);
}

vec4 UnpackOccupancySVO(in uint occupancyPacked)
{
	return unpackUnorm4x8(occupancyPacked);
}

vec3 UnpackNormalSVO(in uint normalPacked)
{
	return unpackSnorm4x8(normalPacked).xyz;
}

vec3 UnpackLightDirSVO(in uint lightDirPacked)
{
	return unpackSnorm4x8(lightDirPacked).xyz;
}

vec3 Interp3DVec3(in vec3 i0, in vec3 i1, in vec3 i2, in vec3 i3,
				  in vec3 i4, in vec3 i5, in vec3 i6, in vec3 i7,
				  in vec3 weight)
{
	vec3 x0 = mix(i0, i1, weight.x);
	vec3 x1 = mix(i2, i3, weight.x);
	vec3 x2 = mix(i4, i5, weight.x);
	vec3 x3 = mix(i6, i7, weight.x);

	vec3 y0 = mix(x0, x1, weight.y);
	vec3 y1 = mix(x2, x3, weight.y);

	vec3 z = mix(y0, y1, weight.z);
	return z;
}

vec4 Interp3DVec4(in vec4 i0, in vec4 i1, in vec4 i2, in vec4 i3,
				  in vec4 i4, in vec4 i5, in vec4 i6, in vec4 i7,
				  in vec3 weight)
{
	vec4 x0 = mix(i0, i1, weight.x);
	vec4 x1 = mix(i2, i3, weight.x);
	vec4 x2 = mix(i4, i5, weight.x);
	vec4 x3 = mix(i6, i7, weight.x);
		   
	vec4 y0 = mix(x0, x1, weight.y);
	vec4 y1 = mix(x2, x3, weight.y);

	vec4 z = mix(y0, y1, weight.z);
	return z;
}

float AnisotropicOcclusion(in vec4 occ0, in vec4 occ1, in vec4 occ2, in vec4 occ3, 
						   in vec4 occ4, in vec4 occ5, in vec4 occ6, in vec4 occ7, 
						   in vec3 direction, in vec3 interp)
{
	// Interp Occlusion
	vec4 occInterp = Interp3DVec4(occ0, occ1, occ2, occ3,
								  occ4, occ5, occ6, occ7,
								  interp);

	// TODO: aniso occlusion
	// (x is base occlusion, y,z,w directional occlusion modifiers)
	return occInterp.x;
}

void InterpIllum(out float occlusion, out vec3 irrad, out float gloss,
				 out vec3 normal, out vec3 lightDir,
				 in uvec4 illum0, in uvec4 illum1, in uvec4 illum2, in uvec4 illum3,
				 in uvec4 illum4, in uvec4 illum5, in uvec4 illum6, in uvec4 illum7,
				 in vec3 marchDir, in vec3 interp)
{
	// Occlusion
	vec4 occ0 = UnpackOccupancySVO(illum0.z);
	vec4 occ1 = UnpackOccupancySVO(illum1.z);
	vec4 occ2 = UnpackOccupancySVO(illum2.z);
	vec4 occ3 = UnpackOccupancySVO(illum3.z);
	vec4 occ4 = UnpackOccupancySVO(illum4.z);
	vec4 occ5 = UnpackOccupancySVO(illum5.z);
	vec4 occ6 = UnpackOccupancySVO(illum6.z);
	vec4 occ7 = UnpackOccupancySVO(illum7.z);
	occlusion = AnisotropicOcclusion(occ0, occ1, occ2, occ3, 
								     occ4, occ5, occ6, occ7,
									 marchDir, interp);

	vec3 value0, value1, value2, value3;
	vec3 value4, value5, value6, value7;

	// Irradiance
	value0 = UnpackIrradianceSVO(illum0.x).xyz;
	value1 = UnpackIrradianceSVO(illum1.x).xyz;
	value2 = UnpackIrradianceSVO(illum2.x).xyz;
	value3 = UnpackIrradianceSVO(illum3.x).xyz;
	value4 = UnpackIrradianceSVO(illum4.x).xyz;
	value5 = UnpackIrradianceSVO(illum5.x).xyz;
	value6 = UnpackIrradianceSVO(illum6.x).xyz;
	value7 = UnpackIrradianceSVO(illum7.x).xyz;

	irrad = Interp3DVec3(value0, value1, value2, value3, 
						 value4, value5, value6, value7,
						 interp);

	// Gloss
	value0.x = UnpackIrradianceSVO(illum0.x).w;
	value1.x = UnpackIrradianceSVO(illum1.x).w;
	value2.x = UnpackIrradianceSVO(illum2.x).w;
	value3.x = UnpackIrradianceSVO(illum3.x).w;
	value4.x = UnpackIrradianceSVO(illum4.x).w;
	value5.x = UnpackIrradianceSVO(illum5.x).w;
	value6.x = UnpackIrradianceSVO(illum6.x).w;
	value7.x = UnpackIrradianceSVO(illum7.x).w;

	float x0 = mix(value0.x, value1.x, interp.x);
	float x1 = mix(value2.x, value3.x, interp.x);
	float x2 = mix(value4.x, value5.x, interp.x);
	float x3 = mix(value6.x, value7.x, interp.x);

	float y0 = mix(x0, x1, interp.y);
	float y1 = mix(x2, x3, interp.y);
	
	gloss = mix(y0, y1, interp.z);

	// Normal
	value0 = (UnpackNormalSVO(illum0.y) + 1.0f) * 0.5f;
	value1 = (UnpackNormalSVO(illum1.y) + 1.0f) * 0.5f;
	value2 = (UnpackNormalSVO(illum2.y) + 1.0f) * 0.5f;
	value3 = (UnpackNormalSVO(illum3.y) + 1.0f) * 0.5f;
	value4 = (UnpackNormalSVO(illum4.y) + 1.0f) * 0.5f;
	value5 = (UnpackNormalSVO(illum5.y) + 1.0f) * 0.5f;
	value6 = (UnpackNormalSVO(illum6.y) + 1.0f) * 0.5f;
	value7 = (UnpackNormalSVO(illum7.y) + 1.0f) * 0.5f;

	normal = Interp3DVec3(value0, value1, value2, value3, 
						  value4, value5, value6, value7,
						  interp);

	// Light Dir
	value0 = (UnpackLightDirSVO(illum0.w) + 1.0f) * 0.5f;
	value1 = (UnpackLightDirSVO(illum1.w) + 1.0f) * 0.5f;
	value2 = (UnpackLightDirSVO(illum2.w) + 1.0f) * 0.5f;
	value3 = (UnpackLightDirSVO(illum3.w) + 1.0f) * 0.5f;
	value4 = (UnpackLightDirSVO(illum4.w) + 1.0f) * 0.5f;
	value5 = (UnpackLightDirSVO(illum5.w) + 1.0f) * 0.5f;
	value6 = (UnpackLightDirSVO(illum6.w) + 1.0f) * 0.5f;
	value7 = (UnpackLightDirSVO(illum7.w) + 1.0f) * 0.5f;

	lightDir = Interp3DVec3(value0, value1, value2, value3, 
							value4, value5, value6, value7,
							interp);
}

vec3 FetchFromIllum(out float occlusion, 				 
					in uvec4 illum0, in uvec4 illum1, in uvec4 illum2, in uvec4 illum3,
					in uvec4 illum4, in uvec4 illum5, in uvec4 illum6, in uvec4 illum7,
					in vec3 marchDir, in vec3 interp)
{
	vec3 irrad, normal, lightDir;
	float gloss;	
	InterpIllum(occlusion, irrad, gloss, normal, lightDir,
				illum0, illum1, illum2, illum3,
				illum4, illum5, illum6, illum7,
				marchDir, interp);

	if(renderType == IRRADIANCE) return irrad;
	else if(renderType == SPECULAR_ALBEDO) return vec3(gloss);
	else if(renderType == NORMAL) return normal;
	else if(renderType == OCCLUSION) return vec3(1.0f - occlusion);
	else if(renderType == LIGHT_DIR) return lightDir;
	return vec3(0.0f);
}

uint ResolveNeig(in uvec4 neigLo, in uvec4 neigHi, in uint index)
{
	if(index < 4) return neigLo[index];
	else return neigHi[index - 4];
}

uvec4 FetchChildIllum(in uvec4 neigLo, in uvec4 neigHi, in ivec3 childNode, in uint offset)
{
	// We need to check node id to find out actual nodes
	// If that level's voxelId is even (all nodes combined on first parent)
	// For each bit next node moves a node
	ivec3 childId = childNode % 2;
	ivec3 parentOffset = childNode / 2;

	uint childIdLinear = 0;
	childIdLinear |= (childId.z << 2);
	childIdLinear |= (childId.y << 1);
	childIdLinear |= (childId.x << 0);

	uint parentOffsetLinear = 0;
	parentOffsetLinear |= (parentOffset.z << 2);
	parentOffsetLinear |= (parentOffset.y << 1);
	parentOffsetLinear |= (parentOffset.x << 0);

	uint currentNeig = ResolveNeig(neigLo, neigHi, parentOffsetLinear);
	if(currentNeig != 0xFFFFFFFF) 
		return svoIllum[offset + currentNeig + childIdLinear];
	return uvec4(0);
}

vec3 SampleSVO(in vec3 worldPos, in vec3 marchDir, in uint maxLevel)
{
	vec3 offset;
	ivec3 voxPos = LevelVoxId(offset, worldPos, maxSVOLevel);
	ivec3 maxLevelSize = ivec3(0x1 << maxSVOLevel);
	
	// Cull if out of bounds
	if(	voxPos.x < 0 || voxPos.x >= maxLevelSize.x ||
		voxPos.y < 0 || voxPos.y >= maxLevelSize.y ||
		voxPos.z < 0 || voxPos.z >= maxLevelSize.z)
	{
		// Node is out of bounds
		return vec3(0.0f);
	}

	// Check Dense
	if(maxLevel < minSVOLevel) return vec3(0.0f, 1.0f, 0.0f);
	else if(maxLevel >= minSVOLevel && 
			maxLevel <= denseLevel)
	{
		// Dense Fetch
		vec3 interp;
		ivec3 index = LevelVoxId(interp, worldPos, maxLevel);
		uint offset = svoLevelOffsets[maxLevel];
		
		uvec4 illum0 = svoIllum[offset + DenseIndexToLinear(index + ivec3(0, 0, 0), maxLevel)];
		uvec4 illum1 = svoIllum[offset + DenseIndexToLinear(index + ivec3(1, 0, 0), maxLevel)];
		uvec4 illum2 = svoIllum[offset + DenseIndexToLinear(index + ivec3(0, 1, 0), maxLevel)];
		uvec4 illum3 = svoIllum[offset + DenseIndexToLinear(index + ivec3(1, 1, 0), maxLevel)];

		uvec4 illum4 = svoIllum[offset + DenseIndexToLinear(index + ivec3(0, 0, 1), maxLevel)];
		uvec4 illum5 = svoIllum[offset + DenseIndexToLinear(index + ivec3(1, 0, 1), maxLevel)];
		uvec4 illum6 = svoIllum[offset + DenseIndexToLinear(index + ivec3(0, 1, 1), maxLevel)];
		uvec4 illum7 = svoIllum[offset + DenseIndexToLinear(index + ivec3(1, 1, 1), maxLevel)];
				
		// Data Fetch (return gray if no value is avail)
		float dataOcclusion;
		vec3 result = FetchFromIllum(dataOcclusion, 
									illum0, illum1, illum2, illum3, 
									illum4, illum5, illum6, illum7, 
									marchDir, interp);
		if (dataOcclusion == 0.0f) vec3(1.0f, 0.0f, 1.0f);
		return result;
	}
	else
	{
		// Sparse Check
		// Start tracing (stateless start from root (dense))
		// Initialize Traverse	
		// Dense Node Index Fetch
		vec3 interp;
		ivec3 index = LevelVoxId(interp, worldPos, denseLevel);
		uint nodeIndex = DenseIndexToLinear(index, denseLevel);
		uint parentIndex = 0xFFFFFFFF;

		uint traversedLevel = denseLevel;
		while(traversedLevel < maxLevel)
		{			
			uint offset = svoLevelOffsets[traversedLevel] - nodeOffsetDifference;
			uint nextNode = svoNode[offset + nodeIndex].x;
			if(nextNode == 0xFFFFFFFF) break;
			
			traversedLevel++;
			parentIndex = nodeIndex;
			nodeIndex = nextNode + CalculateLevelChildId(voxPos, traversedLevel);			
		}

		// Fetch data if either we are on traversed level
		// or missed but on cascade level		 
		//if(/*(traversedLevel == maxLevel ||
		//   traversedLevel >= minCascadeLevel) &&*/
		if(traversedLevel != denseLevel &&
		   parentIndex != 0xFFFFFFFF)
		{			
			// Quadlinear Interp
			// Deferred do not require this but we will implement this
			uvec4 neighborsLow = uvec4(0xFFFFFFFF);
			uvec4 neighborsHi = uvec4(0xFFFFFFFF);
			uvec4 illum0 = uvec4(0); //uvec4(0x00FF00FF, 0, 0, 0); //
			uvec4 illum1 = uvec4(0); //uvec4(0x00FF00FF, 0, 0, 0); //
			uvec4 illum2 = uvec4(0); //uvec4(0x00FF00FF, 0, 0, 0); //
			uvec4 illum3 = uvec4(0); //uvec4(0x00FF00FF, 0, 0, 0); //
			uvec4 illum4 = uvec4(0); //uvec4(0x00FF00FF, 0, 0, 0); //
			uvec4 illum5 = uvec4(0); //uvec4(0x00FF00FF, 0, 0, 0); //
			uvec4 illum6 = uvec4(0); //uvec4(0x00FF00FF, 0, 0, 0); //
			uvec4 illum7 = uvec4(0); //uvec4(0x00FF00FF, 0, 0, 0); //
			
			// Parent Level
			uint parentLevel = traversedLevel - 1;
			uint offset = svoLevelOffsets[parentLevel];
			uint nodeOffset = svoLevelOffsets[parentLevel] - nodeOffsetDifference;
			index = LevelVoxId(interp, worldPos, parentLevel);

			// (0, 0, 0)
			neighborsLow[0] = svoNode[nodeOffset + parentIndex].x;
			illum0 = svoIllum[offset + parentIndex];

			// Neigbours
			uvec3 firstNeig = svoNode[nodeOffset + parentIndex].yzw;
			uvec3 secondNeig = uvec3(0xFFFFFFFF);
			uint thridNeig = 0xFFFFFFFF;

			// First order neighbors
			// (1, 0, 0)
			// (0, 1, 0)
			// (0, 0, 1)			
			if(firstNeig.x != 0xFFFFFFFF)
			{
				neighborsLow[1] = svoNode[nodeOffset + firstNeig.x].x;
				illum1 = svoIllum[offset + firstNeig.x];

				secondNeig.x = svoNode[nodeOffset + firstNeig.x].z;	// x -> y
			}
			if(firstNeig.y != 0xFFFFFFFF) 
			{
				neighborsLow[2] = svoNode[nodeOffset + firstNeig.y].x;				
				illum2 = svoIllum[offset + firstNeig.y];

				secondNeig.y = svoNode[nodeOffset + firstNeig.y].w;	// y -> z
			}
			if(firstNeig.z != 0xFFFFFFFF) 
			{
				neighborsHi[0] = svoNode[nodeOffset + firstNeig.z].x;				
				illum4 = svoIllum[offset + firstNeig.z];

				secondNeig.z = svoNode[nodeOffset + firstNeig.z].y;	// z -> x
			}
			// Second order neighbors
			// (1, 1, 0)
			// (0, 1, 1)
			// (1, 0, 1)
			if(secondNeig.x != 0xFFFFFFFF)
			{
				neighborsLow[3] = svoNode[nodeOffset + secondNeig.x].x;
				illum3 = svoIllum[offset + secondNeig.x];

				thridNeig = svoNode[nodeOffset + secondNeig.x].w; // x -> y -> z				
			}
			if(secondNeig.y != 0xFFFFFFFF) 
			{
				neighborsHi[2] = svoNode[nodeOffset + secondNeig.y].x;
				illum6 = svoIllum[offset + secondNeig.y];
			}
			if(secondNeig.z != 0xFFFFFFFF) 
			{
				neighborsHi[1] = svoNode[nodeOffset + secondNeig.z].x;
				illum5 = svoIllum[offset + secondNeig.z];
			}
			// Third order neighbors
			// (1, 1, 1)
			if(thridNeig != 0xFFFFFFFF)
			{
				neighborsHi[3] = svoNode[nodeOffset + thridNeig].x;
				illum7 = svoIllum[offset + thridNeig];
			}

			// Parent Fetch
			float parentOcclusion;
			vec3 parentResult = FetchFromIllum(parentOcclusion, 
											   illum0, illum1, illum2, illum3,
											   illum4, illum5, illum6, illum7,
											   marchDir, interp);

			// --------------------------//
			// Child Level
			uint childLevel = traversedLevel; 
			offset = svoLevelOffsets[childLevel];
			index = LevelVoxId(interp, worldPos, childLevel);
			ivec3 childBaseId = index; childBaseId &= 0x00000001;

			illum0 = FetchChildIllum(neighborsLow, neighborsHi, childBaseId + ivec3(0, 0, 0), offset);
			illum1 = FetchChildIllum(neighborsLow, neighborsHi, childBaseId + ivec3(1, 0, 0), offset);
			illum2 = FetchChildIllum(neighborsLow, neighborsHi, childBaseId + ivec3(0, 1, 0), offset);
			illum3 = FetchChildIllum(neighborsLow, neighborsHi, childBaseId + ivec3(1, 1, 0), offset);

			illum4 = FetchChildIllum(neighborsLow, neighborsHi, childBaseId + ivec3(0, 0, 1), offset);
			illum5 = FetchChildIllum(neighborsLow, neighborsHi, childBaseId + ivec3(1, 0, 1), offset);
			illum6 = FetchChildIllum(neighborsLow, neighborsHi, childBaseId + ivec3(0, 1, 1), offset);
			illum7 = FetchChildIllum(neighborsLow, neighborsHi, childBaseId + ivec3(1, 1, 1), offset);

		
			// Data Fetch (return gray if no value is avail)
			float childOcclusion;
			vec3 childResult = FetchFromIllum(childOcclusion, 
											  illum0, illum1, illum2, illum3,
											  illum4, illum5, illum6, illum7,
											  marchDir, interp);

			// Quadlinear Interp
			vec3 result = childResult;//mix(parentResult, childResult, 1.0f);
			float dataOcclusion = childOcclusion;//mix(parentOcclusion, childOcclusion, 1.0f);
			if (dataOcclusion == 0.0f) result = vec3(1.0f, 0.0f, 1.0f);
			return result;
		}
	}
}

uint DetermineMaxLevel(in vec3 pos)
{
	// Determine cascade no from distance of the camera
	// And the min span for that cascade
	float outerSpan = baseSpan * float(0x1 << (cascadeCount - 1));
	vec3 gridCenter = gridPos.xyz + float(gridSize - 1) * 0.5f * outerSpan;
	vec3 diff = abs(pos - gridCenter) / (float(gridSize - 1) * 0.5f);
	float maxDiff = max(diff.x, max(diff.y, diff.z));

	uint cascade = findMSB(uint(maxDiff)) + 1;
	cascade = min(cascade, cascadeCount - 1);
	return maxSVOLevel - cascade;
}

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main(void)
{
	// Thread Logic is per cone per pixel
	uvec2 globalId = gl_GlobalInvocationID.xy;
	if(any(greaterThanEqual(globalId, imageSize(fbo).xy))) return;

	// Fetch GBuffer and Interpolate Positions (if size is smaller than current gbuffer)
	vec2 gBuffUV = vec2(globalId + vec2(0.5f) - viewport.xy) / viewport.zw;
	vec3 pos = DepthToWorld(gBuffUV);
	vec3 marchDir = normalize(pos - camPos.xyz);
	
	// Actual Work
	uint maxLevel = min(fetchLevel, DetermineMaxLevel(pos));
	vec3 result = SampleSVO(pos, marchDir, maxLevel);
	imageStore(fbo, ivec2(globalId), vec4(result, 1.0f));
}