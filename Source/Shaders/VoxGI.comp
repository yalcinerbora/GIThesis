#version 430
/*
	**Voxel Global Illumination Compute Shader**

	File Name	: VoxGI.comp
	Author		: Bora Yalciner
	Description	:
		Global Illumination approximation using SVO
*/

#define I_OUT_TEXTURE layout(rgba16f, binding = 0) restrict

#define LU_SVO_NODE layout(std430, binding = 2) readonly
#define LU_SVO_ILLUM layout(std430, binding = 3) readonly
#define LU_SVO_LEVEL_OFFSET layout(std430, binding = 4) readonly

#define U_DO_AO layout(location = 0)
#define U_DO_GI layout(location = 1)
#define U_CAST_SPECULAR_CONE layout(location = 2)

#define U_FTRANSFORM layout(std140, binding = 0)
#define U_INVFTRANSFORM layout(std140, binding = 1)
#define U_OCTREE_UNIFORMS layout(std140, binding = 3)
#define U_INDIRECT_UNIFORMS layout(std140, binding = 4)

#define T_COLOR layout(binding = 0)
#define T_NORMAL layout(binding = 1)
#define T_DEPTH layout(binding = 2)

#define CONE_COUNT 4
#define TRACE_NEIGBOUR 8
#define NEIGHBORS 4	// 2x2 Square

#define BLOCK_SIZE_X 16
#define BLOCK_SIZE_Y 16

#define GI_LIGHT_POINT 0.0f
#define GI_LIGHT_DIRECTIONAL 1.0f
#define GI_LIGHT_AREA 2.0f

#define GI_ONE_OVER_PI 0.318309f
#define PI 3.1415f

// Uniforms
U_DO_AO uniform bool aoOn;
U_DO_GI uniform bool giOn;
U_CAST_SPECULAR_CONE uniform bool specularOn;

uniform vec2 CONE_ORTHO[4] =
{
	vec2( -1.0f, -1.0f),
    vec2( -1.0f, 1.0f),
    vec2( 1.0f, -1.0f),
    vec2( 1.0f, 1.0f)
};

uniform vec4 COLORS[12] =
{
	vec4( 0 * (1.0f / 12.0f), 0.0f, 0.0f, 0.3f),
	vec4( 1 * (1.0f / 12.0f), 0.0f, 0.0f, 0.3f),
	vec4( 2 * (1.0f / 12.0f), 0.0f, 0.0f, 0.3f),
	vec4( 3 * (1.0f / 12.0f), 0.0f, 0.0f, 0.3f),
	vec4( 4 * (1.0f / 12.0f), 0.0f, 0.0f, 0.3f),
	vec4( 5 * (1.0f / 12.0f), 0.0f, 0.0f, 0.3f),
	vec4( 6 * (1.0f / 12.0f), 0.0f, 0.0f, 0.3f),
	vec4( 7 * (1.0f / 12.0f), 0.0f, 0.0f, 0.3f),
	vec4( 8 * (1.0f / 12.0f), 0.0f, 0.0f, 0.3f),
	vec4( 9 * (1.0f / 12.0f), 0.0f, 0.0f, 0.3f),
	vec4( 10 * (1.0f / 12.0f), 0.0f, 0.0f, 0.3f),
	vec4( 11 * (1.0f / 12.0f), 0.0f, 0.0f, 0.3f)
};

uniform ivec3 NEIG_MASK[8] =
{
	ivec3(0, 0, 0),
    ivec3(1, 0, 0),
    ivec3(0, 1, 0),
    ivec3(1, 1, 0),

	ivec3(0, 0, 1),
	ivec3(1, 0, 1),
	ivec3(0, 1, 1),
	ivec3(1, 1, 1)
};

LU_SVO_NODE buffer SVONode
{
	uvec4 svoNode[];
};

LU_SVO_ILLUM buffer SVOIllumination
{
	uvec4 svoIllum[];
};

LU_SVO_LEVEL_OFFSET buffer SVOLevelOffsets
{
	uint svoLevelOffsets[];
};

U_FTRANSFORM uniform FrameTransform
{
	mat4 view;
	mat4 projection;
};

U_INVFTRANSFORM uniform InverseFrameTransform
{
	mat4 invViewProjection;

	vec4 camPos;			// To Calculate Eye
	vec4 camDir;			// To Calculate Eye
	ivec4 viewport;			// Viewport Params
	vec4 depthNearFar;		// depth range params (last two unused)
};

U_OCTREE_UNIFORMS uniform SVOConstants
{
	vec3 gridPos;
	float baseSpan;

	uint minSVOLevel;
	uint denseLevel;
	uint minCascadeLevel;
	uint maxSVOLevel;

	uint cascadeCount;
	uint nodeOffsetDifference;
	uint gridSize;
	uint pad1;
};

U_INDIRECT_UNIFORMS uniform ConeTraceParameters
{
	float specAngleMin;
	float specAngleMax;
	float diffAngleTanHalf;
	float sampleRatio;

	float startOffsetBias;
	float totalDistance;
	float aoIntensity;
	float giIntensity;

	float aoFalloff;
	float pading0;
	float pading1;
	float pading2;
};

// Textures
uniform I_OUT_TEXTURE image2D outTex;

uniform T_COLOR sampler2D gBuffColor;
uniform T_NORMAL usampler2D gBuffNormal;
uniform T_DEPTH sampler2D gBuffDepth;

// Functions
vec3 DepthToWorld(vec2 gBuffUV)
{
	// Converts Depthbuffer Value to World Coords
	// First Depthbuffer to Screen Space
	vec3 ndc = vec3(gBuffUV, texture(gBuffDepth, gBuffUV).x);
	if(ndc.z == 1.0f) return vec3(1.0e+10);

	ndc.xy = 2.0f * ndc.xy - 1.0f;
	ndc.z = ((2.0f * (ndc.z - depthNearFar.x) / (depthNearFar.y - depthNearFar.x)) - 1.0f);

	// Clip Space
	vec4 clip;
	clip.w = projection[3][2] / (ndc.z - (projection[2][2] / projection[2][3]));
	clip.xyz = ndc * clip.w;

	// From Clip Space to World Space
	return (invViewProjection * clip).xyz;
}

uint DenseIndexToLinear(in ivec3 denseIndex, in uint level)
{
	// TODO: Change to Morton (Z-order curve)
	uint size = (0x1 << level);
	return  denseIndex.z * size * size +
			denseIndex.y * size +
			denseIndex.x;
}

ivec3 LevelVoxId(out vec3 offset, in vec3 worldPoint, in uint depth)
{
	float levelSpan = baseSpan * (0x1 << (maxSVOLevel - depth));
	float invLevelSpan = 1.0f / levelSpan;

	vec3 relativeLoc = worldPoint - gridPos;
	offset = mod(relativeLoc, levelSpan) * invLevelSpan;
	return ivec3(floor(relativeLoc * invLevelSpan));
}

uint DiameterToDepth(out float interp, in float diameter)
{
	float diameterRatio = diameter / baseSpan;
	diameterRatio = max(diameterRatio, 1.0f);

	float diameterFactor = log2(diameterRatio);
	interp = fract(diameterRatio);

	uint level = min(maxSVOLevel, uint(diameterRatio));
	level = maxSVOLevel - level;

	if(level <= minSVOLevel)
	{
		interp = 1.0f;
		level = minSVOLevel + 1;
	}
	return level;

	//uint svoLevelInverse = findMSB(uint(floor(diameterRatio))) + 1;

	//float offset = diameterRatio - float(0x1 << svoLevelInverse);
	//offset /= (float(0x1 << (svoLevelInverse + 1)) - float(0x1 << svoLevelInverse));


	////offset = clamp(offset, 0.0f, 1.0f);
	////offset = 1.0f;

	//interp = offset;
	//return maxSVOLevel - svoLevelInverse;
}

uint CalculateLevelChildId(in ivec3 voxPos, in uint levelDepth)
{
	uint bitSet = 0;
	bitSet |= ((voxPos.z >> (maxSVOLevel - levelDepth)) & 0x000000001) << 2;
	bitSet |= ((voxPos.y >> (maxSVOLevel - levelDepth)) & 0x000000001) << 1;
	bitSet |= ((voxPos.x >> (maxSVOLevel - levelDepth)) & 0x000000001) << 0;
	return bitSet;
}

vec3 UnpackNormalGBuff(in uvec2 norm)
{
	vec3 result;
	result.x = ((float(norm.x) / 0xFFFF) - 0.5f) * 2.0f;
	result.y = ((float(norm.y & 0x7FFF) / 0x7FFF) - 0.5f) * 2.0f;
	result.z = sqrt(abs(1.0f - dot(result.xy, result.xy)));
	result.z *= sign(int(norm.y << 16));
	return result;
}

vec4 UnpackIrradianceSVO(in uint irradiancePacked)
{
	return unpackUnorm4x8(irradiancePacked);
}

vec4 UnpackOccupancySVO(in uint occupancyPacked)
{
	return unpackUnorm4x8(occupancyPacked);
}

vec3 UnpackNormalSVO(in uint normalPacked)
{
	return unpackSnorm4x8(normalPacked).xyz;
}

vec3 UnpackLightDirSVO(in uint lightDirPacked)
{
	return unpackSnorm4x8(lightDirPacked).xyz;
}

vec3 Interp3DVec3(in vec3 i0, in vec3 i1, in vec3 i2, in vec3 i3,
				  in vec3 i4, in vec3 i5, in vec3 i6, in vec3 i7,
				  in vec3 weight)
{
	vec3 x0 = mix(i0, i1, weight.x);
	vec3 x1 = mix(i2, i3, weight.x);
	vec3 x2 = mix(i4, i5, weight.x);
	vec3 x3 = mix(i6, i7, weight.x);

	vec3 y0 = mix(x0, x1, weight.y);
	vec3 y1 = mix(x2, x3, weight.y);

	vec3 z = mix(y0, y1, weight.z);
	return z;
}

vec4 Interp3DVec4(in vec4 i0, in vec4 i1, in vec4 i2, in vec4 i3,
				  in vec4 i4, in vec4 i5, in vec4 i6, in vec4 i7,
				  in vec3 weight)
{
	vec4 x0 = mix(i0, i1, weight.x);
	vec4 x1 = mix(i2, i3, weight.x);
	vec4 x2 = mix(i4, i5, weight.x);
	vec4 x3 = mix(i6, i7, weight.x);

	vec4 y0 = mix(x0, x1, weight.y);
	vec4 y1 = mix(x2, x3, weight.y);

	vec4 z = mix(y0, y1, weight.z);
	return z;
}

float AnisotropicOcclusion(in vec4 occ0, in vec4 occ1, in vec4 occ2, in vec4 occ3,
						   in vec4 occ4, in vec4 occ5, in vec4 occ6, in vec4 occ7,
						   in vec3 direction, in vec3 interp)
{
	// Interp Occlusion
	vec4 occInterp = Interp3DVec4(occ0, occ1, occ2, occ3,
								  occ4, occ5, occ6, occ7,
								  interp);

	// TODO: aniso occlusion
	// (x is base occlusion, y,z,w directional occlusion modifiers)
	return occInterp.x;
}

void InterpIllum(out float occlusion, out vec3 irrad, out float gloss,
				 out vec3 normal, out vec3 lightDir,
				 in uvec4 illum0, in uvec4 illum1, in uvec4 illum2, in uvec4 illum3,
				 in uvec4 illum4, in uvec4 illum5, in uvec4 illum6, in uvec4 illum7,
				 in vec3 marchDir, in vec3 interp)
{
	// Occlusion
	vec4 occ0 = UnpackOccupancySVO(illum0.z);
	vec4 occ1 = UnpackOccupancySVO(illum1.z);
	vec4 occ2 = UnpackOccupancySVO(illum2.z);
	vec4 occ3 = UnpackOccupancySVO(illum3.z);
	vec4 occ4 = UnpackOccupancySVO(illum4.z);
	vec4 occ5 = UnpackOccupancySVO(illum5.z);
	vec4 occ6 = UnpackOccupancySVO(illum6.z);
	vec4 occ7 = UnpackOccupancySVO(illum7.z);
	occlusion = AnisotropicOcclusion(occ0, occ1, occ2, occ3,
								     occ4, occ5, occ6, occ7,
									 marchDir, interp);

	vec3 value0, value1, value2, value3;
	vec3 value4, value5, value6, value7;

	// Irradiance
	value0 = UnpackIrradianceSVO(illum0.x).xyz;
	value1 = UnpackIrradianceSVO(illum1.x).xyz;
	value2 = UnpackIrradianceSVO(illum2.x).xyz;
	value3 = UnpackIrradianceSVO(illum3.x).xyz;
	value4 = UnpackIrradianceSVO(illum4.x).xyz;
	value5 = UnpackIrradianceSVO(illum5.x).xyz;
	value6 = UnpackIrradianceSVO(illum6.x).xyz;
	value7 = UnpackIrradianceSVO(illum7.x).xyz;

	irrad = Interp3DVec3(value0, value1, value2, value3,
						 value4, value5, value6, value7,
						 interp);

	//irrad = value0;

	// Gloss
	value0.x = UnpackIrradianceSVO(illum0.x).w;
	value1.x = UnpackIrradianceSVO(illum1.x).w;
	value2.x = UnpackIrradianceSVO(illum2.x).w;
	value3.x = UnpackIrradianceSVO(illum3.x).w;
	value4.x = UnpackIrradianceSVO(illum4.x).w;
	value5.x = UnpackIrradianceSVO(illum5.x).w;
	value6.x = UnpackIrradianceSVO(illum6.x).w;
	value7.x = UnpackIrradianceSVO(illum7.x).w;

	float x0 = mix(value0.x, value1.x, interp.x);
	float x1 = mix(value2.x, value3.x, interp.x);
	float x2 = mix(value4.x, value5.x, interp.x);
	float x3 = mix(value6.x, value7.x, interp.x);

	float y0 = mix(x0, x1, interp.y);
	float y1 = mix(x2, x3, interp.y);

	gloss = mix(y0, y1, interp.z);

	// Normal
	value0 = (UnpackNormalSVO(illum0.y) + 1.0f) * 0.5f;
	value1 = (UnpackNormalSVO(illum1.y) + 1.0f) * 0.5f;
	value2 = (UnpackNormalSVO(illum2.y) + 1.0f) * 0.5f;
	value3 = (UnpackNormalSVO(illum3.y) + 1.0f) * 0.5f;
	value4 = (UnpackNormalSVO(illum4.y) + 1.0f) * 0.5f;
	value5 = (UnpackNormalSVO(illum5.y) + 1.0f) * 0.5f;
	value6 = (UnpackNormalSVO(illum6.y) + 1.0f) * 0.5f;
	value7 = (UnpackNormalSVO(illum7.y) + 1.0f) * 0.5f;

	normal = Interp3DVec3(value0, value1, value2, value3,
						  value4, value5, value6, value7,
						  interp);

	// Light Dir
	value0 = (UnpackLightDirSVO(illum0.w) + 1.0f) * 0.5f;
	value1 = (UnpackLightDirSVO(illum1.w) + 1.0f) * 0.5f;
	value2 = (UnpackLightDirSVO(illum2.w) + 1.0f) * 0.5f;
	value3 = (UnpackLightDirSVO(illum3.w) + 1.0f) * 0.5f;
	value4 = (UnpackLightDirSVO(illum4.w) + 1.0f) * 0.5f;
	value5 = (UnpackLightDirSVO(illum5.w) + 1.0f) * 0.5f;
	value6 = (UnpackLightDirSVO(illum6.w) + 1.0f) * 0.5f;
	value7 = (UnpackLightDirSVO(illum7.w) + 1.0f) * 0.5f;

	lightDir = Interp3DVec3(value0, value1, value2, value3,
							value4, value5, value6, value7,
							interp);
}

uint ResolveNeig(in uvec4 neigLo, in uvec4 neigHi, in uint index)
{
	if(index < 4) return neigLo[index];
	else return neigHi[index - 4];
}

uvec4 FetchChildIllum(in uvec4 neigLo, in uvec4 neigHi, in ivec3 childNode, in uint offset)
{
	// We need to check node id to find out actual nodes
	// If that level's voxelId is even (all nodes combined on first parent)
	// For each bit next node moves a node
	ivec3 childId = childNode % 2;
	ivec3 parentOffset = childNode / 2;

	uint childIdLinear = 0;
	childIdLinear |= (childId.z << 2);
	childIdLinear |= (childId.y << 1);
	childIdLinear |= (childId.x << 0);

	uint parentOffsetLinear = 0;
	parentOffsetLinear |= (parentOffset.z << 2);
	parentOffsetLinear |= (parentOffset.y << 1);
	parentOffsetLinear |= (parentOffset.x << 0);

	uint currentNeig = ResolveNeig(neigLo, neigHi, parentOffsetLinear);
	if(currentNeig != 0xFFFFFFFF)
		return svoIllum[offset + currentNeig + childIdLinear];
	return uvec4(0);
}

void SampleSVO(inout vec3 lightDir,
			   inout float occlusion,
			   inout vec4 irradiance,
			   inout vec3 normal,

			   in vec3 worldPos,
			   in vec3 direction,
			   in uint sampleLevel,
			   in float depthInterp)
{
	vec3 interp;
	ivec3 voxPos = LevelVoxId(interp, worldPos, maxSVOLevel);
	ivec3 maxLevelSize = ivec3(0x1 << maxSVOLevel);
	uint parentLevel = sampleLevel - 1;

	// Cull if out of bounds
	if(	voxPos.x < 0 || voxPos.x >= maxLevelSize.x ||
		voxPos.y < 0 || voxPos.y >= maxLevelSize.y ||
		voxPos.z < 0 || voxPos.z >= maxLevelSize.z)
	{
		return;
	}

	// Check Dense
	if(sampleLevel < minSVOLevel) return;
	else if(sampleLevel > minSVOLevel &&
			sampleLevel <= denseLevel)
	{
		// Dense Fetch Parent
		vec3 interp;
		ivec3 index = LevelVoxId(interp, worldPos, parentLevel);
		uint offset = svoLevelOffsets[parentLevel];

		uvec4 illum0 = svoIllum[offset + DenseIndexToLinear(index + ivec3(0, 0, 0), parentLevel)];
		uvec4 illum1 = svoIllum[offset + DenseIndexToLinear(index + ivec3(1, 0, 0), parentLevel)];
		uvec4 illum2 = svoIllum[offset + DenseIndexToLinear(index + ivec3(0, 1, 0), parentLevel)];
		uvec4 illum3 = svoIllum[offset + DenseIndexToLinear(index + ivec3(1, 1, 0), parentLevel)];

		uvec4 illum4 = svoIllum[offset + DenseIndexToLinear(index + ivec3(0, 0, 1), parentLevel)];
		uvec4 illum5 = svoIllum[offset + DenseIndexToLinear(index + ivec3(1, 0, 1), parentLevel)];
		uvec4 illum6 = svoIllum[offset + DenseIndexToLinear(index + ivec3(0, 1, 1), parentLevel)];
		uvec4 illum7 = svoIllum[offset + DenseIndexToLinear(index + ivec3(1, 1, 1), parentLevel)];

		float parentOcc, parentGloss;
		vec3 parentIrrad, parentLightDir, parentNormal;
		InterpIllum(parentOcc, parentIrrad, parentGloss,
					parentNormal, parentLightDir,
					illum0, illum1, illum2, illum3,
					illum4, illum5, illum6, illum7,
					direction, interp);

		// Dense Fetch Child
		index = LevelVoxId(interp, worldPos, sampleLevel);
		offset = svoLevelOffsets[sampleLevel];

		illum0 = svoIllum[offset + DenseIndexToLinear(index + ivec3(0, 0, 0), sampleLevel)];
		illum1 = svoIllum[offset + DenseIndexToLinear(index + ivec3(1, 0, 0), sampleLevel)];
		illum2 = svoIllum[offset + DenseIndexToLinear(index + ivec3(0, 1, 0), sampleLevel)];
		illum3 = svoIllum[offset + DenseIndexToLinear(index + ivec3(1, 1, 0), sampleLevel)];

		illum4 = svoIllum[offset + DenseIndexToLinear(index + ivec3(0, 0, 1), sampleLevel)];
		illum5 = svoIllum[offset + DenseIndexToLinear(index + ivec3(1, 0, 1), sampleLevel)];
		illum6 = svoIllum[offset + DenseIndexToLinear(index + ivec3(0, 1, 1), sampleLevel)];
		illum7 = svoIllum[offset + DenseIndexToLinear(index + ivec3(1, 1, 1), sampleLevel)];

		float childOcc, childGloss;
		vec3 childIrrad, childLightDir, childNormal;
		InterpIllum(childOcc, childIrrad, childGloss,
					childNormal, childLightDir,
					illum0, illum1, illum2, illum3,
					illum4, illum5, illum6, illum7,
					direction, interp);

		lightDir = mix(childLightDir, parentLightDir, depthInterp);
		normal = mix(childNormal, parentLightDir, depthInterp);
		occlusion = mix(childOcc, parentOcc, depthInterp);
		irradiance.xyz = mix(childIrrad, parentIrrad, depthInterp);
		irradiance.w = mix(childGloss, parentGloss, depthInterp);
	}
	else
	{
		// Sparse Check
		// Start tracing (stateless start from root (dense))
		// Traverse to Parent
		vec3 interp;
		ivec3 index = LevelVoxId(interp, worldPos, denseLevel);
		uint nodeIndex = DenseIndexToLinear(index, denseLevel);

		uint traversedLevel = denseLevel;
		while(traversedLevel < parentLevel)
		{
			uint offset = svoLevelOffsets[traversedLevel] - nodeOffsetDifference;
			uint nextNode = svoNode[offset + nodeIndex].x;
			if(nextNode == 0xFFFFFFFF) break;

			traversedLevel++;
			nodeIndex = nextNode + CalculateLevelChildId(voxPos, traversedLevel);
		}

		// Fetch data if and only if from that level
		// If we can traverse to that level we can sample from that level
		// Otherwise it is impossible
		if(traversedLevel == parentLevel)
		{
			// Deferred do not require this but we will implement this
			uvec4 neighborsLow = uvec4(0xFFFFFFFF);
			uvec4 neighborsHi = uvec4(0xFFFFFFFF);
			uvec4 illum0 = uvec4(0);
			uvec4 illum1 = uvec4(0);
			uvec4 illum2 = uvec4(0);
			uvec4 illum3 = uvec4(0);
			uvec4 illum4 = uvec4(0);
			uvec4 illum5 = uvec4(0);
			uvec4 illum6 = uvec4(0);
			uvec4 illum7 = uvec4(0);

			// Fetch
			// Parent Level
			uint offset = svoLevelOffsets[parentLevel];
			uint nodeOffset = svoLevelOffsets[parentLevel] - nodeOffsetDifference;
			index = LevelVoxId(interp, worldPos, parentLevel);

			// (0, 0, 0)
			neighborsLow[0] = svoNode[nodeOffset + nodeIndex].x;
			illum0 = svoIllum[offset + nodeIndex];

			// Neigbours
			uvec3 firstNeig = svoNode[nodeOffset + nodeIndex].yzw;
			uvec3 secondNeig = uvec3(0xFFFFFFFF);
			uint thridNeig = 0xFFFFFFFF;

			// First order neighbors
			// (1, 0, 0)
			// (0, 1, 0)
			// (0, 0, 1)
			if(firstNeig.x != 0xFFFFFFFF)
			{
				neighborsLow[1] = svoNode[nodeOffset + firstNeig.x].x;
				illum1 = svoIllum[offset + firstNeig.x];

				secondNeig.x = svoNode[nodeOffset + firstNeig.x].z;	// x -> y
			}
			if(firstNeig.y != 0xFFFFFFFF)
			{
				neighborsLow[2] = svoNode[nodeOffset + firstNeig.y].x;
				illum2 = svoIllum[offset + firstNeig.y];

				secondNeig.y = svoNode[nodeOffset + firstNeig.y].w;	// y -> z
			}
			if(firstNeig.z != 0xFFFFFFFF)
			{
				neighborsHi[0] = svoNode[nodeOffset + firstNeig.z].x;
				illum4 = svoIllum[offset + firstNeig.z];

				secondNeig.z = svoNode[nodeOffset + firstNeig.z].y;	// z -> x
			}
			// Second order neighbors
			// (1, 1, 0)
			// (0, 1, 1)
			// (1, 0, 1)
			if(secondNeig.x != 0xFFFFFFFF)
			{
				neighborsLow[3] = svoNode[nodeOffset + secondNeig.x].x;
				illum3 = svoIllum[offset + secondNeig.x];

				thridNeig = svoNode[nodeOffset + secondNeig.x].w; // x -> y -> z
			}
			if(secondNeig.y != 0xFFFFFFFF)
			{
				neighborsHi[2] = svoNode[nodeOffset + secondNeig.y].x;
				illum6 = svoIllum[offset + secondNeig.y];
			}
			if(secondNeig.z != 0xFFFFFFFF)
			{
				neighborsHi[1] = svoNode[nodeOffset + secondNeig.z].x;
				illum5 = svoIllum[offset + secondNeig.z];
			}
			// Third order neighbors
			// (1, 1, 1)
			if(thridNeig != 0xFFFFFFFF)
			{
				neighborsHi[3] = svoNode[nodeOffset + thridNeig].x;
				illum7 = svoIllum[offset + thridNeig];
			}

			float parentOcc, parentGloss;
			vec3 parentIrrad, parentLightDir, parentNormal;
			InterpIllum(parentOcc, parentIrrad, parentGloss,
						parentNormal, parentLightDir,
						illum0, illum1, illum2, illum3,
						illum4, illum5, illum6, illum7,
						direction, interp);


			// --------------------------//
			// Child Level
			uint childLevel = sampleLevel;
			offset = svoLevelOffsets[childLevel];
			index = LevelVoxId(interp, worldPos, childLevel);
			ivec3 childBaseId = index; childBaseId &= 0x00000001;

			illum0 = uvec4(0);
			illum1 = uvec4(0);
			illum2 = uvec4(0);
			illum3 = uvec4(0);
			illum4 = uvec4(0);
			illum5 = uvec4(0);
			illum6 = uvec4(0);
			illum7 = uvec4(0);

			illum0 = FetchChildIllum(neighborsLow, neighborsHi, childBaseId + ivec3(0, 0, 0), offset);
			illum1 = FetchChildIllum(neighborsLow, neighborsHi, childBaseId + ivec3(1, 0, 0), offset);
			illum2 = FetchChildIllum(neighborsLow, neighborsHi, childBaseId + ivec3(0, 1, 0), offset);
			illum3 = FetchChildIllum(neighborsLow, neighborsHi, childBaseId + ivec3(1, 1, 0), offset);

			illum4 = FetchChildIllum(neighborsLow, neighborsHi, childBaseId + ivec3(0, 0, 1), offset);
			illum5 = FetchChildIllum(neighborsLow, neighborsHi, childBaseId + ivec3(1, 0, 1), offset);
			illum6 = FetchChildIllum(neighborsLow, neighborsHi, childBaseId + ivec3(0, 1, 1), offset);
			illum7 = FetchChildIllum(neighborsLow, neighborsHi, childBaseId + ivec3(1, 1, 1), offset);

			float childOcc, childGloss;
			vec3 childIrrad, childLightDir, childNormal;
			InterpIllum(childOcc, childIrrad, childGloss,
						childNormal, childLightDir,
						illum0, illum1, illum2, illum3,
						illum4, illum5, illum6, illum7,
						direction, interp);

			//// DEBUG Zero child
			//float childOcc = 0.0f, childGloss = 0.0f;
			//vec3 childIrrad = vec3(0.0f), childLightDir = vec3(0.0f), childNormal = vec3(0.0f);

			// Quadlinear Interp
			lightDir = mix(childLightDir, parentLightDir, depthInterp);
			normal = mix(childNormal, parentLightDir, depthInterp);
			occlusion = mix(childOcc, parentOcc, depthInterp);
			irradiance.xyz = mix(childIrrad, parentIrrad, depthInterp);
			irradiance.w = mix(childGloss, parentGloss, depthInterp);
		}
	}
}

vec3 IllumFactor(in vec3 wo,
				 in vec4 irradiance,
				 in vec3 wi,
				 in vec3 normal)
{
	float lightIntensity = 1.0f;

	float wiVariance = length(wi);
	float nVariance = length(normal);

	// Rendering Equation
	// n dot l * Surface Kd * li
	// stored in irradiance.xyz
	// voxel specular power is stored in irradiance.w
	// however we need to normalize that
	wo = normalize(wo);
	wi = normalize(wi);
	normal = normalize(normal);
	vec3 halfVec = normalize(wi + wo);
	float specPower = 16.0f + irradiance.w * 4096.0f;

	// Blinn - phong specular BRDF
	float specularBRDF = pow(max(dot(normal, halfVec), 0.0f), specPower);
	specularBRDF *= GI_ONE_OVER_PI * 0.125f * (specPower + 6.0f);

	// ???
	//specularBRDF /= max(dot(normal, wi), 1.0f);
	specularBRDF *= wiVariance;

	// Lambert BRDF
	float diffuseBRDF = GI_ONE_OVER_PI;

	// Total Illumination Factor
	//vec3 illumination = (diffuseBRDF + specularBRDF) * irradiance.xyz;
	vec3 illumination = (diffuseBRDF) * irradiance.xyz;

	illumination *= nVariance;

	// Now We need to do the gaussian lobes
	// For higher levels BRDF tends to become ill defined
	// since it converges into a volume

	// TODO:
	// Light Intensity Relevant to the cone light angle (Lambert Factor)
	// Toksvig 2005
	//float NDFstd2 = (1.0f - nVariance) / nVariance;
	//float std2 = NDFstd2 * NDFstd2 + 1.0f;//coneStd2 * coneStd2;
	//float toksvigFactor = 1.0f / (1.0f + std2 * irradiance.w);
	float toksvigFactor = 1.0f;
	//illumination *= pow(max(dot(normal.xyz, wo), 0.0f), toksvigFactor);
	//illumination *= (1.0f + toksvigFactor * irradiance.w) / (1.0f + irradiance.w);

	// Sampled Lobe Factor
	//lightIntensity *= normal.w;
	//lightIntensity *= (1.0f - normal.w);
	//lightIntensity *= ((1.0f - lobeFactor) / lobeFactor);

	illumination = clamp(illumination, 0.0f, 1.0f);
	return illumination;
}

vec3 CalculateConeOffset(in vec3 ortho1, in vec3 ortho2, float angleRadian)
{
	return normalize(ortho1 * cos(angleRadian) + ortho2 * sin(angleRadian));
}

void GenOrthoBasis(out vec3 ortho1, out vec3 ortho2, in vec3 vector)
{
	// Find an Arbitrary orthogonal basis
	// set min abs component to 1
	vec3 absVector = abs(vector);
	float axisMin = min(absVector.x, min(absVector.y, absVector.z));
	vec3 vecOrtho = vec3((absVector.x == axisMin) ? 1.0f : vector.x,
						 (absVector.y == axisMin) ? 1.0f : vector.y,
						 (absVector.z == axisMin) ? 1.0f : vector.z);
	ortho1 = normalize(cross(vector, vecOrtho));
	ortho2 = normalize(cross(vector, ortho1));

	// [(-z-y) / x, 1, 1] is perpendicular (unless normal is X axis)
	// handle special case where normal is (1.0f, 0.0f, 0.0f)
	// = normalize(vec3(-(worldNorm.z + worldNorm.y) / worldNorm.x, 1.0f, 1.0f));
	//ortho1 = mix(ortho1, vec3(0.0f, 1.0f, 0.0f), floor(worldNorm.x));
	//vec3 ortho2 = normalize(cross(worldNorm, ortho1));
}

uint DetermineCascade(in vec3 pos)
{
	// Determine cascade no from distance of the camera
	float outerSpan = baseSpan * float(0x1 << (cascadeCount - 1));
	vec3 gridCenter = gridPos.xyz + float(gridSize - 1) * 0.5f * outerSpan;
	vec3 diff = abs(pos - gridCenter) / (float(gridSize - 1));
	float maxDiff = max(diff.x, max(diff.y, diff.z));
	uint cascade = findMSB(uint(maxDiff)) + 1;
	return min(cascade, cascadeCount - 1);
}

layout (local_size_x = BLOCK_SIZE_X, local_size_y = BLOCK_SIZE_Y, local_size_z = 1) in;
void main(void)
{
	// Thread Logic is per cone per pixel
	uvec2 globalId = gl_GlobalInvocationID.xy;
	if(any(greaterThanEqual(globalId, imageSize(outTex).xy))) return;

	// Fetch GBuffer and Interpolate Positions (if size is smaller than current gbuffer)
	//vec2 gBuffUV = vec2(globalId + vec2(0.5f) - viewport.xy) / viewport.zw;
	vec2 gBuffUV = vec2(globalId) / vec2(imageSize(outTex).xy);
	vec3 pos = DepthToWorld(gBuffUV);
	vec3 worldNorm = UnpackNormalGBuff(texture(gBuffNormal, gBuffUV).xy);

	// Cascade for that start position
	uint cascade = DetermineCascade(pos);
	float cascadeSpan = baseSpan * float(0x1 << cascade);

	// Specular cone
	// Angle
	float specularity = texture(gBuffColor, gBuffUV).a;
	float specConeAngle = specAngleMin + (1.0f - specularity) * (specAngleMax - specAngleMin);
	float specConeAperture = tan(specConeAngle * 0.5f);
	// Direction
	vec3 worldEye = normalize(camPos.xyz - pos);
	vec3 specConeDir = normalize(-reflect(worldEye, worldNorm));
	bool skipSpec = false;// specularity < 0.5f;

	// Diffuse Cone
	// Determine Diffuse Cone ID (multiple Neighbors Fetch Different Cones then gets blurred)
	uint neighborLength = (NEIGHBORS / 2);
	uint dirId = ((globalId.y  % neighborLength) * neighborLength) + (globalId.x % neighborLength);

	// Find Edge vectors from normal
	vec3 ortho1, ortho2;
	GenOrthoBasis(ortho1, ortho2, worldNorm);

	float diffuseConeAperture = diffAngleTanHalf;
	vec3 coneOffset = CalculateConeOffset(ortho1, ortho2, dirId * (2.0f * PI / NEIGHBORS));
	vec3 diffuseConeDir = normalize(worldNorm + diffuseConeAperture * coneOffset);

	// Everything is generated now cone tracing
	// Single specular cone and single diffuse cone
	vec4 surfaceAccumulation = vec4(0.0f);
	uint coneCount = (specularOn && (!skipSpec)) ? (CONE_COUNT + 1) : CONE_COUNT;
	for(uint i = 0; i < coneCount; i++)
	{
		// Chose the cone
		float coneAperture = (i != CONE_COUNT) ? diffuseConeAperture : specConeAperture;
		vec3 coneDir = (i != CONE_COUNT) ? diffuseConeDir : specConeDir;

		// Total Illumination and Occlusion
		vec3 totalIllumination = vec3(0.0f);
		float totalAO = 0.0f;
		float totalOcclusion = 0.0f;

		// Initally Start the cone away from the surface since
		// voxel system and polygon system are not %100 aligned
		const float sqrt3 = 1.73205080757f;
		//vec3 initalTraceStart = pos + coneDir * cascadeSpan * startOffsetBias;
		vec3 initalTraceStart = pos + worldNorm * sqrt3 * cascadeSpan * startOffsetBias;
		//vec3 initalTraceStart = pos + worldNorm * 50.0f * startOffsetBias;

		// Start sampling towards that direction
		// Loop Traverses until MaxDistance Exceeded
		// March distance is variable per iteration

		int j = 0;
		float marchDistance = cascadeSpan;
		for(float traversedDistance = 0.0f;
			traversedDistance <= totalDistance;
			traversedDistance += marchDistance)
		{
			vec3 currentPos = initalTraceStart + coneDir * traversedDistance;
			float diameter = max(cascadeSpan, coneAperture * traversedDistance * 2.0f);

			// Sample from SVO (Quadlinear Interpolation)
			vec4 irradiance = vec4(0.0f);
			vec3 normal = vec3(0.0f), lightDir = vec3(0.0f);
			float occlusion = 0.0f, depthOffset = 0.0f;
			uint sampleDepth = DiameterToDepth(depthOffset, diameter);

			SampleSVO(lightDir, occlusion, irradiance, normal,
					  currentPos, coneDir,
					  sampleDepth, depthOffset);


			// Calculate Illumination
			vec3 illumination = (giOn) ? IllumFactor(-coneDir,
													 irradiance,
													 lightDir,
													 normal) : vec3(0.0f);

			//totalIllumination += illumination;
			//totalIllumination += vec3(occlusion);

			// Correction Term to prevent intersecting samples error
			occlusion = 1.0f - pow(1.0f - occlusion, marchDistance / diameter);
			illumination = vec3(1.0f) - pow(vec3(1.0f) - illumination, vec3(marchDistance / diameter));

			// Occlusion falloff (linear)
			float falloff = (1.0f / (1.0f + pow(traversedDistance, aoFalloff)));
			//float falloff = (1.0f / (1.0f + aoFalloff * diameter));
			//float falloff = (1.0f / (1.0f + aoFalloff * diameter));
			//float falloff = (1.0f / (1.0f + aoFalloff * traversedDistance));
			//float factor = (i == CONE_COUNT) ? 1.0f : 4.0f;

			// Incorporation
			float lambertFactor = max(dot(worldNorm, coneDir), 0.0f);
			float nodeOcclusion = occlusion * lambertFactor;
			illumination *= lambertFactor;

			// Volume Occlusion Sampling
			totalIllumination += (vec3(1.0f) - totalOcclusion) * illumination;
			if(i != CONE_COUNT) totalAO += (1.0f - totalOcclusion) * nodeOcclusion * falloff;
			totalOcclusion += (1.0f - totalOcclusion) * occlusion;

			// Advance sample point (from sampling diameter)
			marchDistance = diameter * sampleRatio;

			// Break on early occlusion
			if(abs(totalOcclusion - 1.0f) < 0.001f) break;

			//// DEBUG
			//if(i != CONE_COUNT) totalAO += occlusion;
			//if(i != CONE_COUNT) totalIllumination += irradiance.xyz;
			//break;
			////j++;
			////if(j == 1) break;

		}
		// Add contrubution of this vec
		surfaceAccumulation.xyz += totalIllumination;
		surfaceAccumulation.w += totalAO;
	}
	// Intensity incorporation
	surfaceAccumulation.xyz *= giIntensity;
	surfaceAccumulation.w *= aoIntensity;
	surfaceAccumulation.w = 1.0f - surfaceAccumulation.w;
	imageStore(outTex, ivec2(globalId), surfaceAccumulation);


	// Debug
	//imageStore(outTex, ivec2(globalId), color);
	//imageStore(outTex, ivec2(globalId), vec4(specularity));
	//imageStore(outTex, ivec2(globalId), vec4(diffuseConeDir, 0.0f));
	//imageStore(outTex, ivec2(globalId), vec4(result.w));
	//imageStore(outTex, ivec2(globalId), vec4(pos, 0.0f));
	//imageStore(outTex, ivec2(globalId), vec4(gBuffUV, 0.0f, 0.0f));
	//imageStore(outTex, ivec2(globalId), vec4(worldNorm, 0.0f));
}
